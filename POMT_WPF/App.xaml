<Application
    x:Class="POMT_WPF.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Icon="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:helper="clr-namespace:POMT_WPF.MVVM.Other"
    xmlns:local="clr-namespace:POMT_WPF.MVVM.View.Controls"
    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
    xmlns:view="clr-namespace:POMT_WPF.MVVM.View"
    xmlns:viewModel="clr-namespace:POMT_WPF.MVVM.ViewModel"
    StartupUri="MainWindow.xaml">
    <Application.Resources>

        <Style TargetType="TextBox">
            <EventSetter Event="GotKeyboardFocus" Handler="TextBox_GotKeyboardFocus" />
        </Style>

        <!--#region Colors-->
        <SolidColorBrush x:Key="ColumbiaBlue" Color="#CCD7E1" />
        <SolidColorBrush x:Key="LapisLazuli" Color="#2D6587" />
        <SolidColorBrush x:Key="TextFont" Color="#40474C" />
        <SolidColorBrush x:Key="Orange" Color="#E37B34" />
        <SolidColorBrush x:Key="Charcoal" Color="#2F4858" />
        <SolidColorBrush x:Key="purple" Color="#7A578B" />
        <SolidColorBrush x:Key="RaisinBlack" Color="#353340" />
        <SolidColorBrush x:Key="LightBlu" Color="#A8D0DB" />
        <SolidColorBrush x:Key="AtomicTangerine" Color="#E49273" />
        <SolidColorBrush x:Key="DarkSpringGreen" Color="#157145" />
        <SolidColorBrush x:Key="maybeDark" Color="#1E152A" />
        <SolidColorBrush x:Key="maybeYello" Color="#F5A65B" />
        <SolidColorBrush x:Key="NaplesYello" Color="#FFDF64" />
        <SolidColorBrush x:Key="BattleshipGray" Color="#877B66" />
        <SolidColorBrush x:Key="CoralPink" Color="#D78A76" />
        <SolidColorBrush x:Key="ChiliRed" Color="#D64933" />
        <SolidColorBrush x:Key="MoonStone" Color="#58A4B0" />
        <SolidColorBrush x:Key="MintCream" Color="#F7FFF7" />
        <SolidColorBrush x:Key="AirSuperiorityBlue" Color="#6CA6C1" />
        <SolidColorBrush x:Key="CambridgeBlue" Color="#7C9885" />
        <SolidColorBrush x:Key="Sage" Color="#B5B682" />
        <SolidColorBrush x:Key="PeachYellow" Color="#FEDC97" />
        <SolidColorBrush x:Key="MountbattenPink" Color="#93748A" />
        <SolidColorBrush x:Key="SeaGreen" Color="#0A8754" />
        <SolidColorBrush x:Key="Salmon" Color="#FF8E72" />
        <SolidColorBrush x:Key="BitterSweet" Color="#ED6A5E" />
        <SolidColorBrush x:Key="Puce" Color="#C6878F" />
        <SolidColorBrush x:Key="BurntSienna" Color="#EC774C" />

        <!--#endregion-->

        <!--#region Buttons/Boxes-->
        <Style x:Key="addButton" TargetType="Button">
            <Setter Property="Background" Value="#2D6587" />
            <Setter Property="Foreground" Value="#ffffff" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Width" Value="150" />
            <Setter Property="Height" Value="35" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="Margin" Value="0,20,0,0" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="Grid.Row" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="7">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseCaptured" Value="True">
                    <Setter Property="Background" Value="#E37B34" />
                    <Setter Property="Foreground" Value="#dcdcdc" />
                </Trigger>
                <!--<Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Background" Value="{StaticResource SecondaryColor}"/>
        </Trigger>-->
            </Style.Triggers>
        </Style>

        <Style x:Key="gridEditButton" TargetType="Button">
            <Setter Property="Background" Value="#512da8" />
            <Setter Property="BorderBrush" Value="#4a148c" />
            <Setter Property="Foreground" Value="#ffffff" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border
                            Padding="5"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="5">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#673ab7" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style
            x:Key="gridRemoveButton"
            BasedOn="{StaticResource gridEditButton}"
            TargetType="Button">
            <Setter Property="Background" Value="#d32f2f" />
            <Setter Property="BorderBrush" Value="#b71c1c" />
            <Setter Property="Foreground" Value="#ffffff" />

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#f44336" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="gridButtonIcon" TargetType="Icon:PackIconMaterial">
            <Setter Property="Width" Value="12" />
            <Setter Property="Height" Value="12" />
            <Setter Property="VerticalAlignment" Value="Center" />

        </Style>

        <Style x:Key="menuButton" TargetType="Button">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="#efefef" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Margin" Value="15,3" />
            <Setter Property="FontSize" Value="16" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="7">
                            <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#E37B34" />
                    <Setter Property="Foreground" Value="#ffffff" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="menuButtonIcon" TargetType="Icon:PackIconMaterial">
            <Setter Property="Width" Value="15" />
            <Setter Property="Height" Value="15" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Margin" Value="20,2,20,0" />
        </Style>

        <Style x:Key="orderTextBlock" TargetType="TextBlock">
            <Setter Property="Height" Value="40" />
            <Setter Property="Width" Value="80" />
            <Setter Property="Background" Value="{StaticResource purple}" />
            <Setter Property="Foreground" Value="#efefef" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Margin" Value="10" />
        </Style>

        <Style x:Key="orderTextBox" TargetType="TextBox">
            <Setter Property="Background" Value="{StaticResource Orange}" />
            <Setter Property="Foreground" Value="#b0b9c6" />
            <Setter Property="Height" Value="40" />
            <Setter Property="Width" Value="100" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Padding" Value="15,10" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Margin" Value="0,10" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBoxBase">
                        <Border
                            x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="#e0e6ed"
                            BorderThickness="1"
                            CornerRadius="20"
                            SnapsToDevicePixels="True">
                            <ScrollViewer
                                x:Name="PART_ContentHose"
                                Focusable="false"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <Style x:Key="newOrderTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border
                            Height="40"
                            Background="#353340"
                            CornerRadius="10">
                            <Grid>
                                <Rectangle StrokeThickness="1" />

                                <TextBox
                                    x:Name="SearchBox"
                                    Margin="1"
                                    Padding="5"
                                    VerticalAlignment="Center"
                                    Background="Transparent"
                                    BorderThickness="0"
                                    Foreground="#CFCFCF"
                                    Text="{TemplateBinding Text}" />

                                <TextBlock
                                    Grid.Column="1"
                                    Width="100"
                                    Height="40"
                                    Margin="10,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    FontSize="11"
                                    Foreground="DarkGray"
                                    IsHitTestVisible="False"
                                    Text="...">

                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Text, ElementName=SearchBox}" Value="">
                                                    <Setter Property="Visibility" Value="Visible" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                            <Setter Property="Visibility" Value="Hidden" />
                                        </Style>
                                    </TextBlock.Style>

                                </TextBlock>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="pagingButton" TargetType="Button">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="#6c7682" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="Margin" Value="1,0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border
                            Padding="10,5"
                            Background="{TemplateBinding Background}"
                            CornerRadius="5">
                            <ContentPresenter
                                Margin="0,0,0,1"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#7950f2" />
                    <Setter Property="Foreground" Value="#ffffff" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="pagingButtonIcon" TargetType="Icon:PackIconMaterial">
            <Setter Property="Width" Value="10" />
            <Setter Property="Height" Value="10" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>

        <Style
            x:Key="radioButtonTheme"
            BasedOn="{StaticResource {x:Type ToggleButton}}"
            TargetType="{x:Type RadioButton}">
            <Style.Setters>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="RadioButton">
                            <Grid
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Background="{TemplateBinding Background}">
                                <Border BorderBrush="{StaticResource purple}" BorderThickness="1">
                                    <TextBlock
                                        Width="75"
                                        Height="30"
                                        Margin="10,5,10,5"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Background="{StaticResource purple}"
                                        FontSize="14"
                                        Foreground="#D2D2D2"
                                        Text="{TemplateBinding Property=Content}" />
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
            </Style.Setters>
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="{StaticResource Orange}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="reportLabelsRadioButtonTheme" TargetType="{x:Type RadioButton}">
            <Style.Setters>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="RadioButton">

                            <Grid
                                Width="60"
                                Height="30"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center">
                                <Border
                                    x:Name="border"
                                    Background="{StaticResource purple}"
                                    BorderThickness="0"
                                    CornerRadius="5">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                </Border>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource Orange}" />
                                </Trigger>
                            </ControlTemplate.Triggers>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style.Setters>
        </Style>

        <Style x:Key="secondaryButton" TargetType="Button">
            <Setter Property="Background" Value="{StaticResource purple}" />
            <Setter Property="Foreground" Value="#efefef" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Width" Value="50" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="7">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseCaptured" Value="True">
                    <Setter Property="Background" Value="#E37B34" />
                    <Setter Property="Foreground" Value="#ffffff" />
                </Trigger>
                <!--<Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource SecondaryColor}"/>
                </Trigger>-->
            </Style.Triggers>
        </Style>

        <Style x:Key="templateViewButton" TargetType="Button">
            <Setter Property="Background" Value="{StaticResource Orange}" />
            <Setter Property="Foreground" Value="{StaticResource maybeDark}" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Width" Value="50" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="7">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseCaptured" Value="True">
                    <Setter Property="Background" Value="#E37B34" />
                    <Setter Property="Foreground" Value="#ffffff" />
                </Trigger>
                <!--<Trigger Property="IsMouseOver" Value="True">
             <Setter Property="Background" Value="{StaticResource SecondaryColor}"/>
         </Trigger>-->
            </Style.Triggers>
        </Style>

        <Style x:Key="settingsButton" TargetType="Button">
            <Setter Property="Background" Value="{StaticResource purple}" />
            <Setter Property="Foreground" Value="{StaticResource maybeDark}" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Width" Value="50" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="7">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseCaptured" Value="True">
                    <Setter Property="Background" Value="#E37B34" />
                    <Setter Property="Foreground" Value="#ffffff" />
                </Trigger>
                <!--<Trigger Property="IsMouseOver" Value="True">
             <Setter Property="Background" Value="{StaticResource SecondaryColor}"/>
         </Trigger>-->
            </Style.Triggers>
        </Style>

        <Style x:Key="topButton" TargetType="Button">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="#6e7783" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Width" Value="30" />
            <Setter Property="Height" Value="30" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="50">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#dcdcdc" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="textBoxSearch" TargetType="TextBox">
            <Setter Property="Background" Value="#ffffff" />
            <Setter Property="Foreground" Value="{StaticResource TextFont}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Padding" Value="15,10" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Margin" Value="0,10" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="#e0e6ed"
                            BorderThickness="1"
                            CornerRadius="20">
                            <ContentPresenter />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="tabButton" TargetType="ToggleButton">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="#40474C" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Width" Value="70" />
            <Setter Property="Height" Value="45" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0,0,0,1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <!--<Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" Value="#E37B34" />
                </Trigger>-->
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="BorderBrush" Value="#E37B34" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="orderFormFreezeButton" TargetType="ToggleButton">
            <Setter Property="Width" Value="60" />
            <Setter Property="Height" Value="20" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0,0,0,1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <!--<Trigger Property="IsMouseOver" Value="True">
      <Setter Property="BorderBrush" Value="#E37B34" />
  </Trigger>-->
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="{StaticResource MoonStone}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="orderFormEditButton" TargetType="ToggleButton">
            <Setter Property="Width" Value="60" />
            <Setter Property="Height" Value="20" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0,0,0,1">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <!--<Trigger Property="IsMouseOver" Value="True">
             <Setter Property="BorderBrush" Value="#E37B34" />
         </Trigger>-->
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="#E37B34" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style
            x:Key="textBoxFilter"
            BasedOn="{StaticResource textBoxSearch}"
            TargetType="TextBox">
            <Setter Property="Padding" Value="10,7" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBoxBase">
                        <Border
                            x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="#e0e6ed"
                            BorderThickness="1"
                            CornerRadius="7"
                            SnapsToDevicePixels="True" />

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="#d9d9d9" />
                            </Trigger>

                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="#d9d9d9" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>
        <Style x:Key="orderFormTextFillTextBox" TargetType="{x:Type local:TextFillTextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:TextFillTextBox}">
                        <Border
                            Width="80"
                            Height="40"
                            Background="{TemplateBinding Background}"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            CornerRadius="10">
                            <Grid>

                                <Rectangle IsHitTestVisible="False" StrokeThickness="1" />

                                <TextBox
                                    x:Name="Text_Box"
                                    Margin="10,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Background="Transparent"
                                    BorderThickness="0"
                                    Foreground="{StaticResource maybeDark}"
                                    IsReadOnly="{TemplateBinding IsReadOnly}"
                                    Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                                <TextBlock
                                    x:Name="PlaceholderTextBlock"
                                    Margin="10,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    FontSize="11"
                                    Foreground="{StaticResource maybeDark}"
                                    IsHitTestVisible="False"
                                    Text="{TemplateBinding TextFill}"
                                    Visibility="Hidden" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Text" Value="">
                                <Setter TargetName="PlaceholderTextBlock" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="Text" Value="{x:Null}">
                                <Setter TargetName="PlaceholderTextBlock" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                <Setter TargetName="Text_Box" Property="FocusManager.FocusedElement" Value="{Binding ElementName=Text_Box}" />
                                <Setter TargetName="PlaceholderTextBlock" Property="Visibility" Value="Hidden" />
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="orderFormItemnameTextFillTextBox" TargetType="{x:Type local:TextFillTextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:TextFillTextBox}">
                        <Border
                            Width="130"
                            Height="40"
                            Background="{TemplateBinding Background}"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            CornerRadius="10">
                            <Grid>

                                <Rectangle IsHitTestVisible="False" StrokeThickness="1" />

                                <TextBox
                                    x:Name="Text_Box"
                                    Margin="10,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Background="Transparent"
                                    BorderThickness="0"
                                    Foreground="{StaticResource maybeDark}"
                                    Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                                <TextBlock
                                    x:Name="PlaceholderTextBlock"
                                    Margin="10,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    FontSize="11"
                                    Foreground="{StaticResource maybeDark}"
                                    IsHitTestVisible="False"
                                    Text="{TemplateBinding TextFill}"
                                    Visibility="Hidden" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Text" Value="">
                                <Setter TargetName="PlaceholderTextBlock" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="Text" Value="{x:Null}">
                                <Setter TargetName="PlaceholderTextBlock" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                <Setter TargetName="Text_Box" Property="FocusManager.FocusedElement" Value="{Binding ElementName=Text_Box}" />
                                <Setter TargetName="PlaceholderTextBlock" Property="Visibility" Value="Hidden" />
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TemplateViewTextFillTextBox" TargetType="{x:Type local:TextFillTextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:TextFillTextBox}">
                        <Border
                            Width="80"
                            Height="40"
                            Background="{StaticResource ColumbiaBlue}"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            CornerRadius="10">
                            <Grid>

                                <Rectangle IsHitTestVisible="False" StrokeThickness="1" />

                                <TextBox
                                    x:Name="Text_Box"
                                    Margin="10,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Background="Transparent"
                                    BorderThickness="0"
                                    Foreground="{StaticResource maybeDark}"
                                    Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                                <TextBlock
                                    x:Name="PlaceholderTextBlock"
                                    Margin="10,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    FontSize="11"
                                    Foreground="{StaticResource maybeDark}"
                                    IsHitTestVisible="False"
                                    Text="{TemplateBinding TextFill}"
                                    Visibility="Hidden" />
                            </Grid>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="Text" Value="">
                                <Setter TargetName="PlaceholderTextBlock" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="Text" Value="{x:Null}">
                                <Setter TargetName="PlaceholderTextBlock" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                <Setter TargetName="Text_Box" Property="FocusManager.FocusedElement" Value="{Binding ElementName=Text_Box}" />
                                <Setter TargetName="PlaceholderTextBlock" Property="Visibility" Value="Hidden" />
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="textFillTextBox" TargetType="{x:Type local:TextFillTextBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:TextFillTextBox}">
                        <Border
                            Width="200"
                            Height="40"
                            Margin="5"
                            Background="{StaticResource ColumbiaBlue}"
                            CornerRadius="10">
                            <Grid>
                                <Rectangle StrokeThickness="1" />

                                <TextBox
                                    x:Name="Text_Box"
                                    Margin="10,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Background="Transparent"
                                    BorderThickness="0"
                                    Foreground="{StaticResource maybeDark}"
                                    Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                <!--  Text="{TemplateBinding Text}"  -->
                                <TextBlock
                                    x:Name="PlaceholderTextBlock"
                                    Margin="10,0,0,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    FontSize="11"
                                    Foreground="{StaticResource maybeDark}"
                                    IsHitTestVisible="False"
                                    Text="{TemplateBinding TextFill}"
                                    Visibility="Hidden" />
                            </Grid>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="Text" Value="">
                                <Setter TargetName="PlaceholderTextBlock" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="Text" Value="{x:Null}">
                                <Setter TargetName="PlaceholderTextBlock" Property="Visibility" Value="Visible" />
                            </Trigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->

        <!--#region DataGrid Styles-->

        <!--  main dash  -->
        <Style x:Key="{ComponentResourceKey ResourceId=dashboardDataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Rectangle
                                x:Name="Border"
                                Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                                SnapsToDevicePixels="True" />
                            <Polygon
                                x:Name="Arrow"
                                Margin="8,8,3,3"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Bottom"
                                Fill="Black"
                                Opacity="0.15"
                                Points="0,10 10,10 10,0"
                                Stretch="Uniform" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Border" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Arrow" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="dashboardDataGridStyle" TargetType="{x:Type DataGrid}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="#222528" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="ScrollViewer.PanningMode" Value="Both" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="AutoGenerateColumns" Value="False" />
            <Setter Property="HeadersVisibility" Value="Column" />
            <Setter Property="Margin" Value="0,10,0,0" />
            <Setter Property="SelectionMode" Value="single" />
            <Setter Property="SelectionUnit" Value="FullRow" />
            <Setter Property="CanUserAddRows" Value="False" />
            <Setter Property="CanUserDeleteRows" Value="False" />
            <Setter Property="CanUserResizeRows" Value="False" />
            <Setter Property="CanUserReorderColumns" Value="False" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="ColumnWidth" Value="*" />
            <Setter Property="GridLinesVisibility" Value="None" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGrid}">
                        <Border
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                                <ScrollViewer.Template>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <Button
                                                Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                                Command="{x:Static DataGrid.SelectAllCommand}"
                                                Focusable="false"
                                                Style="{DynamicResource {ComponentResourceKey ResourceId=dashboardDataGridSelectAllButtonStyle,
                                                                                              TypeInTargetAssembly={x:Type DataGrid}}}"
                                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                            <DataGridColumnHeadersPresenter
                                                x:Name="PART_ColumnHeadersPresenter"
                                                Grid.Column="1"
                                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                            <ScrollContentPresenter
                                                x:Name="PART_ScrollContentPresenter"
                                                Grid.Row="1"
                                                Grid.ColumnSpan="2"
                                                CanContentScroll="{TemplateBinding CanContentScroll}" />
                                            <ScrollBar
                                                x:Name="PART_VerticalScrollBar"
                                                Grid.Row="1"
                                                Grid.Column="2"
                                                Maximum="{TemplateBinding ScrollableHeight}"
                                                Orientation="Vertical"
                                                ViewportSize="{TemplateBinding ViewportHeight}"
                                                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                            <Grid Grid.Row="2" Grid.Column="1">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>
                                                <ScrollBar
                                                    x:Name="PART_HorizontalScrollBar"
                                                    Grid.Column="1"
                                                    Maximum="{TemplateBinding ScrollableWidth}"
                                                    Orientation="Horizontal"
                                                    ViewportSize="{TemplateBinding ViewportWidth}"
                                                    Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                    Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </ScrollViewer.Template>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true" />
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="dashboardColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
            <Setter Property="Width" Value="8" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Cursor" Value="SizeWE" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="dashboardDataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="#40474C" />
            <Setter Property="Margin" Value="15,0,15,10" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                        <Grid>
                            <theme:DataGridHeaderBorder
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                IsClickable="{TemplateBinding CanUserSort}"
                                IsHovered="{TemplateBinding IsMouseOver}"
                                IsPressed="{TemplateBinding IsPressed}"
                                SeparatorBrush="{TemplateBinding SeparatorBrush}"
                                SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
                                SortDirection="{TemplateBinding SortDirection}">
                                <ContentPresenter
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </theme:DataGridHeaderBorder>
                            <Thumb
                                x:Name="PART_LeftHeaderGripper"
                                HorizontalAlignment="Left"
                                Style="{StaticResource dashboardColumnHeaderGripperStyle}" />
                            <Thumb
                                x:Name="PART_RightHeaderGripper"
                                HorizontalAlignment="Right"
                                Style="{StaticResource dashboardColumnHeaderGripperStyle}" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="dashboardDataGridRowStyle" TargetType="{x:Type DataGridRow}">
            <Setter Property="Background" Value="White" />
            <Setter Property="Margin" Value="0,4,0,0" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
            <Setter Property="ValidationErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <TextBlock
                            Margin="2,0,0,0"
                            VerticalAlignment="Center"
                            Foreground="Red"
                            Text="!" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridRow}">
                        <Border
                            x:Name="DGR_Border"
                            Padding="0,8"
                            Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            CornerRadius="5"
                            SnapsToDevicePixels="True">
                            <SelectiveScrollingGrid>
                                <SelectiveScrollingGrid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </SelectiveScrollingGrid.ColumnDefinitions>
                                <SelectiveScrollingGrid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </SelectiveScrollingGrid.RowDefinitions>
                                <DataGridCellsPresenter
                                    Grid.Column="1"
                                    ItemsPanel="{TemplateBinding ItemsPanel}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <DataGridDetailsPresenter
                                    Grid.Row="1"
                                    Grid.Column="1"
                                    SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                    Visibility="{TemplateBinding DetailsVisibility}" />
                                <DataGridRowHeader
                                    Grid.RowSpan="2"
                                    SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                    Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                            </SelectiveScrollingGrid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#E37B34" />
                    <Setter Property="Foreground" Value="#ffffff" />
                </Trigger>

                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="#E37B34" />
                    <Setter Property="Foreground" Value="#ffffff" />
                </Trigger>

                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true" />
                        <Condition Property="Selector.IsSelectionActive" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="#dfdfdf" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="dashboardDataGridCellStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Margin" Value="15,0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            SnapsToDevicePixels="True">
                            <ContentPresenter Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#endregion-->

        <!--  order form  -->
        <SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}" Color="#FF000000" />
        <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Rectangle
                                x:Name="Border"
                                Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                                SnapsToDevicePixels="True" />
                            <Polygon
                                x:Name="Arrow"
                                Margin="8,8,3,3"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Bottom"
                                Fill="Black"
                                Opacity="0.15"
                                Points="0,10 10,10 10,0"
                                Stretch="Uniform" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Border" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Arrow" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="orderFormGridStyle" TargetType="{x:Type DataGrid}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="#efefef" />
            <Setter Property="BorderBrush" Value="#FF688CAF" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
            <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
            <Setter Property="ScrollViewer.PanningMode" Value="Both" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="GridLinesVisibility" Value="None" />
            <Setter Property="AutoGenerateColumns" Value="False" />
            <Setter Property="CanUserAddRows" Value="False" />
            <Setter Property="CanUserDeleteRows" Value="False" />
            <Setter Property="CanUserResizeRows" Value="False" />
            <Setter Property="CanUserReorderColumns" Value="False" />
            <Setter Property="HeadersVisibility" Value="Column" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGrid}">
                        <Border
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                                <ScrollViewer.Template>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <Button
                                                Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                                Command="{x:Static DataGrid.SelectAllCommand}"
                                                Focusable="false"
                                                Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,
                                                                                              TypeInTargetAssembly={x:Type DataGrid}}}"
                                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                            <DataGridColumnHeadersPresenter
                                                x:Name="PART_ColumnHeadersPresenter"
                                                Grid.Column="1"
                                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                            <ScrollContentPresenter
                                                x:Name="PART_ScrollContentPresenter"
                                                Grid.Row="1"
                                                Grid.ColumnSpan="2"
                                                CanContentScroll="{TemplateBinding CanContentScroll}" />
                                            <ScrollBar
                                                x:Name="PART_VerticalScrollBar"
                                                Grid.Row="1"
                                                Grid.Column="2"
                                                Maximum="{TemplateBinding ScrollableHeight}"
                                                Orientation="Vertical"
                                                ViewportSize="{TemplateBinding ViewportHeight}"
                                                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                                Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                            <Grid Grid.Row="2" Grid.Column="1">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>
                                                <ScrollBar
                                                    x:Name="PART_HorizontalScrollBar"
                                                    Grid.Column="1"
                                                    Maximum="{TemplateBinding ScrollableWidth}"
                                                    Orientation="Horizontal"
                                                    ViewportSize="{TemplateBinding ViewportWidth}"
                                                    Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                    Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </ScrollViewer.Template>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true" />
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="orderFormColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
            <Setter Property="Width" Value="8" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Cursor" Value="SizeWE" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="orderFormDataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="#efefef" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                        <Grid>
                            <theme:DataGridHeaderBorder
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                IsClickable="{TemplateBinding CanUserSort}"
                                IsHovered="{TemplateBinding IsMouseOver}"
                                IsPressed="{TemplateBinding IsPressed}"
                                SeparatorBrush="{TemplateBinding SeparatorBrush}"
                                SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
                                SortDirection="{TemplateBinding SortDirection}">
                                <ContentPresenter
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </theme:DataGridHeaderBorder>
                            <Thumb
                                x:Name="PART_LeftHeaderGripper"
                                HorizontalAlignment="Left"
                                Style="{StaticResource orderFormColumnHeaderGripperStyle}" />
                            <Thumb
                                x:Name="PART_RightHeaderGripper"
                                HorizontalAlignment="Right"
                                Style="{StaticResource orderFormColumnHeaderGripperStyle}" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="orderFormDataGridRowStyle" TargetType="{x:Type DataGridRow}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
            <Setter Property="ValidationErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <TextBlock
                            Margin="2,0,0,0"
                            VerticalAlignment="Center"
                            Foreground="Red"
                            Text="!" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridRow}">
                        <Border
                            x:Name="DGR_Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                            <SelectiveScrollingGrid>
                                <SelectiveScrollingGrid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </SelectiveScrollingGrid.ColumnDefinitions>
                                <SelectiveScrollingGrid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </SelectiveScrollingGrid.RowDefinitions>
                                <DataGridCellsPresenter
                                    Grid.Column="1"
                                    ItemsPanel="{TemplateBinding ItemsPanel}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <DataGridDetailsPresenter
                                    Grid.Row="1"
                                    Grid.Column="1"
                                    SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                    Visibility="{TemplateBinding DetailsVisibility}" />
                                <DataGridRowHeader
                                    Grid.RowSpan="2"
                                    SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                    Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                            </SelectiveScrollingGrid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsNewItem" Value="True">
                    <Setter Property="Margin" Value="{Binding NewItemMargin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Foreground" Value="#ffffff" />
                </Trigger>

                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Foreground" Value="#ffffff" />
                </Trigger>

                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="true" />
                        <Condition Property="Selector.IsSelectionActive" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" Value="#dfdfdf" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="orderFormDataGridCellStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="IsTabStop" Value="False" />
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{x:Null}" />
                    <Setter Property="BorderBrush" Value="{x:Null}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--#region CheckBox Style-->
        <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070" />
        <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121" />
        <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF" />
        <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF" />
        <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121" />
        <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF" />
        <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD" />
        <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121" />
        <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6" />
        <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC" />
        <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070" />
        <Style x:Key="CheckBoxStyle1" TargetType="{x:Type CheckBox}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}" />
            <Setter Property="BorderBrush" Value="#dae2ea" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid
                            x:Name="templateRoot"
                            Background="Transparent"
                            SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Border
                                x:Name="checkBoxBorder"
                                Margin="1"
                                Padding="1"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="3">
                                <Grid x:Name="markGrid">
                                    <Path
                                        x:Name="optionMark"
                                        Margin="1"
                                        Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "
                                        Fill="{StaticResource OptionMark.Static.Glyph}"
                                        Opacity="0"
                                        Stretch="None" />
                                    <Rectangle
                                        x:Name="indeterminateMark"
                                        Margin="2"
                                        Fill="{StaticResource OptionMark.Static.Glyph}"
                                        Opacity="0" />
                                </Grid>
                            </Border>
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Grid.Column="1"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="true">
                                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                <Setter Property="Padding" Value="4,-1,0,0" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.MouseOver.Background}" />
                                <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="#9575cd" />
                                <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                                <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.MouseOver.Glyph}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Disabled.Background}" />
                                <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource OptionMark.Disabled.Border}" />
                                <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
                                <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.Disabled.Glyph}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="checkBoxBorder" Property="Background" Value="{StaticResource OptionMark.Pressed.Background}" />
                                <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="#9575cd" />
                                <Setter TargetName="optionMark" Property="Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
                                <Setter TargetName="indeterminateMark" Property="Fill" Value="{StaticResource OptionMark.Pressed.Glyph}" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                                <Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter TargetName="optionMark" Property="Opacity" Value="0" />
                                <Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->

    </Application.Resources>
</Application>
